name: Reusable workflow to build and push multi-arch images

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      base_tag:
        required: false
        type: string
        default: 'humble'
      output_tag:
        required: false
        type: string
      dockerfile_extension:
        required: false
        type: string
    secrets:
      token:
        description: 'The GitHub token passed from the caller workflow'
        required: true

jobs:
  metadata:
    runs-on: ubuntu-latest
    name: Parse inputs
    outputs:
      output_tag: ${{ steps.parse.outputs.output_tag }}
      image_name: ${{ steps.parse.outputs.image_name }}
      path: ${{ steps.parse.outputs.path }}
      file: ${{ steps.parse.outputs.file }}
      build_flags: ${{ steps.parse.outputs.build_flags }}
    steps:
      - name: Parse inputs
        id: parse
        run: |
          BUILD_FLAGS=()
          # parse base tag     
          BASE_TAG=${{ inputs.base_tag }}
          BUILD_FLAGS+=(--build-arg BASE_TAG=${BASE_TAG})
          echo "::debug::Using base image tag ${BASE_TAG}"
          # parse output tag
          OUTPUT_TAG=${{ inputs.output_tag }}
          if [ -z ${OUTPUT_TAG} ]; then
            OUTPUT_TAG=${BASE_TAG}
          fi
          echo "output_tag=${OUTPUT_TAG}" >> $GITHUB_OUTPUT
          echo "::debug::Generated image tag will be ${OUTPUT_TAG}"
          
          # parse image name
          IMAGE_NAME=${{ inputs.workspace }}
          IMAGE_NAME=${{ github.repository_owner }}/${IMAGE_NAME//[_]/-}
          echo "::debug::Generated image name will be ${IMAGE_NAME}"
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          
          # parse docker path and file
          WS_PATH=${{ inputs.workspace }}
          WS_PATH=${WS_PATH//[-]/_}
          echo "path=${WS_PATH}" >> $GITHUB_OUTPUT
          FILE=${WS_PATH}/Dockerfile${{ inputs.dockerfile_extension }}
          echo "file=${FILE}" >> $GITHUB_OUTPUT

          echo "build_flags=${BUILD_FLAGS[@]}" >> $GITHUB_OUTPUT

  build:
    needs: metadata
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
        include:
          - image: ubuntu-latest
          - image: buildjet-2vcpu-ubuntu-2204-arm
            arch: arm64

    runs-on: ${{ matrix.image }}
    name: Build and publish (${{ matrix.arch }})
    steps:
      - uses: actions/checkout@v3

      - if: needs.metadata.outputs.path == 'ros2_ws' || needs.metadata.outputs.path == 'ros_ws'
        run: |
          CONFIG_PATH=${{ needs.metadata.outputs.path }}/config
          mkdir -p ${CONFIG_PATH}
          cp common/sshd_entrypoint.sh ${CONFIG_PATH}/
      
      - uses: aica-technology/.github/.github/actions/ghcr-build@v0.6.1
        with:
          image_name: ${{ needs.metadata.outputs.image_name }}
          image_tags: ${{ needs.metadata.outputs.output_tag }}-${{ matrix.arch }}
          build_context_path: ${{ needs.metadata.outputs.path }}
          dockerfile_path: ${{ needs.metadata.outputs.file }}
          build_flags: ${{ needs.metadata.outputs.build_flags }}
          token: ${{ secrets.GITHUB_TOKEN }}
  
  multi-arch:
    runs-on: ubuntu-latest
    name: Merge into a multi-arch image
    needs: [ metadata, build ]
    steps:
      - uses: aica-technology/.github/.github/actions/ghcr-manifest-merge@v0.6.1
        with:
          image_name: ${{ needs.metadata.outputs.image_name }}
          image_tags: ${{ needs.metadata.outputs.output_tag }}
          archs: amd64,arm64
          token: ${{ secrets.GITHUB_TOKEN }}
